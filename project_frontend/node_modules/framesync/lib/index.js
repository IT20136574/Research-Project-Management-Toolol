import { onNextFrame, defaultTimestep } from "./on-next-frame";
import { createRenderStep } from "./create-render-step";
<<<<<<< HEAD
const maxElapsed = 40;
let useDefaultElapsed = true;
let runNextFrame = false;
let isProcessing = false;
const frame = {
    delta: 0,
    timestamp: 0,
};
const stepsOrder = [
=======
var maxElapsed = 40;
var useDefaultElapsed = true;
var runNextFrame = false;
var isProcessing = false;
var frame = {
    delta: 0,
    timestamp: 0,
};
var stepsOrder = [
>>>>>>> d52127c60da7f6ce492aebad9fb090b9de13f97b
    "read",
    "update",
    "preRender",
    "render",
    "postRender",
];
<<<<<<< HEAD
const steps = stepsOrder.reduce((acc, key) => {
    acc[key] = createRenderStep(() => (runNextFrame = true));
    return acc;
}, {});
const sync = stepsOrder.reduce((acc, key) => {
    const step = steps[key];
    acc[key] = (process, keepAlive = false, immediate = false) => {
=======
var steps = stepsOrder.reduce(function (acc, key) {
    acc[key] = createRenderStep(function () { return (runNextFrame = true); });
    return acc;
}, {});
var sync = stepsOrder.reduce(function (acc, key) {
    var step = steps[key];
    acc[key] = function (process, keepAlive, immediate) {
        if (keepAlive === void 0) { keepAlive = false; }
        if (immediate === void 0) { immediate = false; }
>>>>>>> d52127c60da7f6ce492aebad9fb090b9de13f97b
        if (!runNextFrame)
            startLoop();
        return step.schedule(process, keepAlive, immediate);
    };
    return acc;
}, {});
<<<<<<< HEAD
const cancelSync = stepsOrder.reduce((acc, key) => {
    acc[key] = steps[key].cancel;
    return acc;
}, {});
const flushSync = stepsOrder.reduce((acc, key) => {
    acc[key] = () => steps[key].process(frame);
    return acc;
}, {});
const processStep = (stepId) => steps[stepId].process(frame);
const processFrame = (timestamp) => {
=======
var cancelSync = stepsOrder.reduce(function (acc, key) {
    acc[key] = steps[key].cancel;
    return acc;
}, {});
var flushSync = stepsOrder.reduce(function (acc, key) {
    acc[key] = function () { return steps[key].process(frame); };
    return acc;
}, {});
var processStep = function (stepId) { return steps[stepId].process(frame); };
var processFrame = function (timestamp) {
>>>>>>> d52127c60da7f6ce492aebad9fb090b9de13f97b
    runNextFrame = false;
    frame.delta = useDefaultElapsed
        ? defaultTimestep
        : Math.max(Math.min(timestamp - frame.timestamp, maxElapsed), 1);
    frame.timestamp = timestamp;
    isProcessing = true;
    stepsOrder.forEach(processStep);
    isProcessing = false;
    if (runNextFrame) {
        useDefaultElapsed = false;
        onNextFrame(processFrame);
    }
};
<<<<<<< HEAD
const startLoop = () => {
=======
var startLoop = function () {
>>>>>>> d52127c60da7f6ce492aebad9fb090b9de13f97b
    runNextFrame = true;
    useDefaultElapsed = true;
    if (!isProcessing)
        onNextFrame(processFrame);
};
<<<<<<< HEAD
const getFrameData = () => frame;
=======
var getFrameData = function () { return frame; };
>>>>>>> d52127c60da7f6ce492aebad9fb090b9de13f97b
export default sync;
export { cancelSync, flushSync, getFrameData };
//# sourceMappingURL=index.js.map